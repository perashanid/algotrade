import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { TrendingUp, TrendingDown, Target, DollarSign, Activity, AlertCircle, Plus, Edit, Save, X, ChevronDown, ChevronRight, Search, Trash2, Users, Tag } from 'lucide-react';
import { constraintPositionsService } from '../../services/constraintPositions';
import { constraintGroupsService } from '../../services/constraintGroups';
import { stockGroupsService } from '../../services/stockGroups';
import { ConstraintPosition, ConstraintGroup, StockGroup } from '../../types';
import { getStockInfo } from '../../data/stockDatabase';
import StockSearchInput from '../Common/StockSearchInput';
import toast from 'react-hot-toast';

const ConstraintPositionList: React.FC = () => {
  const [constraintGroups, setConstraintGroups] = useState<ConstraintGroup[]>([]);
  const [stockGroups, setStockGroups] = useState<StockGroup[]>([]);
  const [positions, setPositions] = useState<ConstraintPosition[]>([]);
  const [individualConstraints, setIndividualConstraints] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set());
  const [editingGroup, setEditingGroup] = useState<string | null>(null);
  const [editingStock, setEditingStock] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [editValues, setEditValues] = useState<{
    buyAmount: number;
    sellAmount: number;
    buyTriggerPercent: number;
    sellTriggerPercent: number;
    profitTriggerPercent?: number;
  }>({
    buyAmount: 0,
    sellAmount: 0,
    buyTriggerPercent: 0,
    sellTriggerPercent: 0
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const { constraintsService } = await import('../../services/constraints');
      const [groupsData, stockGroupsData, positionsData, individualConstraintsData] = await Promise.all([
        constraintGroupsService.getConstraintGroups(),
        stockGroupsService.getStockGroups(),
        constraintPositionsService.getConstraintPositions(),
        constraintsService.getConstraints()
      ]);
      setConstraintGroups(groupsData);
      setStockGroups(stockGroupsData);
      setPositions(positionsData);
      setIndividualConstraints(individualConstraintsData);
    } catch (error) {
      toast.error('Failed to load constraint data');
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleGroupExpansion = (groupId: string) => {
    setExpandedGroups(prev => {
      const newSet = new Set(prev);
      if (newSet.has(groupId)) {
        newSet.delete(groupId);
      } else {
        newSet.add(groupId);
      }
      return newSet;
    });
  };

  const handleEditGroup = (group: ConstraintGroup) => {
    setEditingGroup(group.id);
    setEditValues({
      buyTriggerPercent: group.buyTriggerPercent,
      sellTriggerPercent: group.sellTriggerPercent,
      profitTriggerPercent: group.profitTriggerPercent,
      buyAmount: group.buyAmount,
      sellAmount: group.sellAmount
    });
  };

  const handleEditStock = (groupId: string, stock: string, group: ConstraintGroup) => {
    setEditingStock(`${groupId}-${stock}`);

    // Check if this stock has individual overrides, otherwise use group defaults
    const stockOverride = group.stockOverrides?.[stock];
    setEditValues({
      buyTriggerPercent: stockOverride?.buyTriggerPercent ?? group.buyTriggerPercent,
      sellTriggerPercent: stockOverride?.sellTriggerPercent ?? group.sellTriggerPercent,
      profitTriggerPercent: stockOverride?.profitTriggerPercent ?? group.profitTriggerPercent,
      buyAmount: stockOverride?.buyAmount ?? group.buyAmount,
      sellAmount: stockOverride?.sellAmount ?? group.sellAmount
    });
  };

  const handleSaveEdit = async () => {
    try {
      if (editingGroup) {
        await constraintGroupsService.updateConstraintGroup(editingGroup, editValues);
        toast.success('Constraint group updated successfully!');
        setEditingGroup(null);
        await loadData();
      } else if (editingStock) {
        // For individual stock editing, update the stock's individual constraints within the group
        const [groupId, stockSymbol] = editingStock.split('-');

        await constraintGroupsService.updateStockConstraint(groupId, stockSymbol, {
          buyTriggerPercent: editValues.buyTriggerPercent,
          sellTriggerPercent: editValues.sellTriggerPercent,
          profitTriggerPercent: editValues.profitTriggerPercent,
          buyAmount: editValues.buyAmount,
          sellAmount: editValues.sellAmount
        });

        toast.success(`${stockSymbol} constraints updated successfully!`);
        setEditingStock(null);
        await loadData();
      }
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Failed to update constraint');
    }
  };

  const handleCancelEdit = () => {
    setEditingGroup(null);
    setEditingStock(null);
    setEditValues({
      buyAmount: 0,
      sellAmount: 0,
      buyTriggerPercent: 0,
      sellTriggerPercent: 0
    });
  };

  const handleDeleteGroup = async (groupId: string, groupName: string) => {
    if (window.confirm(`Are you sure you want to delete the constraint group "${groupName}"? This action cannot be undone.`)) {
      try {
        await constraintGroupsService.deleteConstraintGroup(groupId);
        toast.success('Constraint group deleted successfully!');
        await loadData();
      } catch (error) {
        toast.error(error instanceof Error ? error.message : 'Failed to delete constraint group');
      }
    }
  };

  const handleDeleteStockGroup = async (stockGroupId: string, stockGroupName: string) => {
    if (window.confirm(`Are you sure you want to delete the stock group "${stockGroupName}"? This action cannot be undone.`)) {
      try {
        await stockGroupsService.deleteStockGroup(stockGroupId);
        toast.success('Stock group deleted successfully!');
        await loadData();
      } catch (error) {
        toast.error(error instanceof Error ? error.message : 'Failed to delete stock group');
      }
    }
  };

  const handleRemoveStockFromGroup = async (stockGroupId: string, stockSymbol: string) => {
    if (stockSymbol) {
      // Remove individual stock from group
      if (window.confirm(`Are you sure you want to remove ${stockSymbol} from this group?`)) {
        try {
          const stockGroup = stockGroups.find(g => g.id === stockGroupId);
          if (stockGroup) {
            const updatedStocks = stockGroup.stocks.filter(s => s !== stockSymbol);
            await stockGroupsService.updateStockGroup(stockGroupId, { stocks: updatedStocks });
            toast.success(`${stockSymbol} removed from group successfully!`);
            await loadData();
          }
        } catch (error) {
          toast.error(error instanceof Error ? error.message : 'Failed to remove stock from group');
        }
      }
    } else {
      // Remove entire stock group from constraint
      const stockGroup = stockGroups.find(g => g.id === stockGroupId);
      if (window.confirm(`Are you sure you want to remove the entire "${stockGroup?.name}" group from this constraint?`)) {
        try {
          // Find the constraint group and remove the stock group from it
          const constraintGroup = constraintGroups.find(cg => cg.stockGroups.includes(stockGroupId));
          if (constraintGroup) {
            const updatedStockGroups = constraintGroup.stockGroups.filter(sg => sg !== stockGroupId);
            await constraintGroupsService.updateConstraintGroup(constraintGroup.id, { stockGroups: updatedStockGroups });
            toast.success(`Stock group removed from constraint successfully!`);
            await loadData();
          }
        } catch (error) {
          toast.error(error instanceof Error ? error.message : 'Failed to remove stock group from constraint');
        }
      }
    }
  };

  const handleResetStockConstraint = async (groupId: string, stockSymbol: string) => {
    if (window.confirm(`Reset ${stockSymbol} to use group default constraints?`)) {
      try {
        await constraintGroupsService.removeStockConstraint(groupId, stockSymbol);
        toast.success(`${stockSymbol} reset to group defaults!`);
        await loadData();
      } catch (error) {
        toast.error(error instanceof Error ? error.message : 'Failed to reset stock constraint');
      }
    }
  };

  const handleAddStockToGroup = async (constraintGroupId: string, stockSymbol: string) => {
    try {
      const constraintGroup = constraintGroups.find(g => g.id === constraintGroupId);
      if (constraintGroup && !constraintGroup.stocks.includes(stockSymbol)) {
        const updatedStocks = [...constraintGroup.stocks, stockSymbol];
        await constraintGroupsService.updateConstraintGroup(constraintGroupId, { stocks: updatedStocks });
        toast.success(`${stockSymbol} added to constraint group successfully!`);
        await loadData();
      }
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Failed to add stock to group');
    }
  };

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value);
  };

  const formatPercent = (value: number) => {
    return `${value > 0 ? '+' : ''}${value.toFixed(2)}%`;
  };

  const formatNumber = (value: number, decimals: number = 4) => {
    return value.toLocaleString('en-US', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    });
  };

  const positionCount = positions.filter(p => p.status === 'position').length;
  const totalConstraints = constraintGroups.length + individualConstraints.length;
  const totalValue = positions.reduce((sum, p) => sum + p.marketValue, 0);
  const totalStocks = constraintGroups.reduce((sum, group) => sum + group.stocks.length, 0) + individualConstraints.length;

  // Filter constraints based on search term
  const filteredConstraintGroups = constraintGroups.filter(group => {
    if (!searchTerm) return true;
    const searchLower = searchTerm.toLowerCase();
    return (
      group.name.toLowerCase().includes(searchLower) ||
      group.stocks.some(stock => stock.toLowerCase().includes(searchLower))
    );
  });

  // Get all stocks that match search term for expanded view
  const getMatchingStocks = (group: ConstraintGroup) => {
    if (!searchTerm) return group.stocks;
    return group.stocks.filter(stock =>
      stock.toLowerCase().includes(searchTerm.toLowerCase())
    );
  };

  // Auto-expand groups when searching for stocks
  React.useEffect(() => {
    if (searchTerm) {
      const groupsWithMatchingStocks = constraintGroups
        .filter(group => group.stocks.some(stock =>
          stock.toLowerCase().includes(searchTerm.toLowerCase())
        ))
        .map(group => group.id);

      if (groupsWithMatchingStocks.length > 0) {
        setExpandedGroups(new Set(groupsWithMatchingStocks));
      }
    }
  }, [searchTerm, constraintGroups]);

  if (loading) {
    return (
      <div className="card">
        <div className="animate-pulse">
          <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4"></div>
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="flex items-center space-x-4">
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-20"></div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (constraintGroups.length === 0) {
    return (
      <div className="card">
        <div className="text-center py-8">
          <div className="mx-auto w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mb-4">
            <Activity className="h-6 w-6 text-gray-400 dark:text-gray-500" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">No Constraints</h3>
          <p className="text-gray-600 dark:text-gray-300 mb-4">
            Create constraints to start monitoring stocks and building positions automatically.
          </p>
          <Link
            to="/constraints"
            className="inline-flex items-center px-4 py-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors"
          >
            <Plus className="h-4 w-4 mr-2" />
            Create Constraints
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="card">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Active Constraints</h2>
          <p className="text-gray-600 dark:text-gray-300 text-sm">
            All constraints and their current positions
          </p>
        </div>
        <Link
          to="/constraints"
          className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 text-sm font-medium"
        >
          Manage Constraints
        </Link>
      </div>

      {/* Search Bar */}
      <div className="mb-6">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 dark:text-gray-500" />
          <input
            type="text"
            placeholder="Search constraints or stocks..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent"
          />
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-4 gap-4 mb-6">
        <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
          <div className="text-lg font-semibold text-blue-600 dark:text-blue-400">{totalConstraints}</div>
          <div className="text-sm text-blue-700 dark:text-blue-300">Total Constraints</div>
        </div>
        <div className="text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
          <div className="text-lg font-semibold text-purple-600 dark:text-purple-400">{totalStocks}</div>
          <div className="text-sm text-purple-700 dark:text-purple-300">Total Stocks</div>
        </div>
        <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
          <div className="text-lg font-semibold text-green-600 dark:text-green-400">{positionCount}</div>
          <div className="text-sm text-green-700 dark:text-green-300">Active Positions</div>
        </div>
        <div className="text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <div className="text-lg font-semibold text-gray-600 dark:text-gray-300">{formatCurrency(totalValue)}</div>
          <div className="text-sm text-gray-700 dark:text-gray-400">Total Value</div>
        </div>
      </div>



      {/* Constraint Groups List */}
      <div className="space-y-3">
        {filteredConstraintGroups.map((group) => (
          <div key={group.id} className="card border border-blue-200 dark:border-blue-800">
            {/* Group Header - Always Visible */}
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-3">
                  <button
                    onClick={() => toggleGroupExpansion(group.id)}
                    className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
                  >
                    {expandedGroups.has(group.id) ? (
                      <ChevronDown className="h-4 w-4 text-gray-600 dark:text-gray-300" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-gray-600 dark:text-gray-300" />
                    )}
                  </button>
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{group.name}</h3>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${group.isActive
                    ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'
                    }`}>
                    {group.isActive ? 'Active' : 'Inactive'}
                  </span>
                  <span className="text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 px-2 py-1 rounded-full">
                    {group.stocks.length} stocks
                  </span>
                </div>

                {group.description && (
                  <p className="text-gray-600 dark:text-gray-300 mb-3">{group.description}</p>
                )}

                {/* Group Constraints - Editable */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  {editingGroup === group.id ? (
                    <>
                      {/* Editable Buy Trigger */}
                      <div className="flex items-center gap-2">
                        <div className="p-2 bg-red-100 rounded-lg">
                          <TrendingDown className="h-4 w-4 text-red-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-gray-600 dark:text-gray-300">Buy Trigger</p>
                          <div className="flex items-center gap-1">
                            <input
                              type="number"
                              value={editValues.buyTriggerPercent}
                              onChange={(e) => setEditValues(prev => ({ ...prev, buyTriggerPercent: parseFloat(e.target.value) }))}
                              className="w-16 px-1 py-0.5 text-sm border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                              step="0.1"
                            />
                            <span className="text-sm text-gray-900 dark:text-white">%</span>
                          </div>
                          <div className="flex items-center gap-1 mt-1">
                            <span className="text-xs text-gray-500 dark:text-gray-400">$</span>
                            <input
                              type="number"
                              value={editValues.buyAmount}
                              onChange={(e) => setEditValues(prev => ({ ...prev, buyAmount: parseFloat(e.target.value) }))}
                              className="w-20 px-1 py-0.5 text-xs border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                              step="100"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Editable Sell Trigger */}
                      <div className="flex items-center gap-2">
                        <div className="p-2 bg-green-100 rounded-lg">
                          <TrendingUp className="h-4 w-4 text-green-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-gray-600 dark:text-gray-300">Sell Trigger</p>
                          <div className="flex items-center gap-1">
                            <input
                              type="number"
                              value={editValues.sellTriggerPercent}
                              onChange={(e) => setEditValues(prev => ({ ...prev, sellTriggerPercent: parseFloat(e.target.value) }))}
                              className="w-16 px-1 py-0.5 text-sm border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                              step="0.1"
                            />
                            <span className="text-sm text-gray-900 dark:text-white">%</span>
                          </div>
                          <div className="flex items-center gap-1 mt-1">
                            <span className="text-xs text-gray-500 dark:text-gray-400">$</span>
                            <input
                              type="number"
                              value={editValues.sellAmount}
                              onChange={(e) => setEditValues(prev => ({ ...prev, sellAmount: parseFloat(e.target.value) }))}
                              className="w-20 px-1 py-0.5 text-xs border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                              step="100"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Editable Profit Target */}
                      <div className="flex items-center gap-2">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <Target className="h-4 w-4 text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-gray-600 dark:text-gray-300">Profit Target</p>
                          <div className="flex items-center gap-1">
                            <input
                              type="number"
                              value={editValues.profitTriggerPercent || ''}
                              onChange={(e) => setEditValues(prev => ({ ...prev, profitTriggerPercent: e.target.value ? parseFloat(e.target.value) : undefined }))}
                              className="w-16 px-1 py-0.5 text-sm border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                              step="0.1"
                              placeholder="15"
                            />
                            <span className="text-sm text-gray-900 dark:text-white">%</span>
                          </div>
                        </div>
                      </div>
                    </>
                  ) : (
                    <>
                      {/* Display-only triggers */}
                      <div className="flex items-center gap-2">
                        <div className="p-2 bg-red-100 rounded-lg">
                          <TrendingDown className="h-4 w-4 text-red-600" />
                        </div>
                        <div>
                          <p className="text-sm text-gray-600 dark:text-gray-300">Buy Trigger</p>
                          <p className="font-medium text-gray-900 dark:text-white">
                            {formatPercent(group.buyTriggerPercent)} drop
                          </p>
                          <p className="text-sm text-gray-600 dark:text-gray-300">
                            Amount: {formatCurrency(group.buyAmount)}
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center gap-2">
                        <div className="p-2 bg-green-100 rounded-lg">
                          <TrendingUp className="h-4 w-4 text-green-600" />
                        </div>
                        <div>
                          <p className="text-sm text-gray-600 dark:text-gray-300">Sell Trigger</p>
                          <p className="font-medium text-gray-900 dark:text-white">
                            {formatPercent(group.sellTriggerPercent)} rise
                          </p>
                          <p className="text-sm text-gray-600 dark:text-gray-300">
                            Amount: {formatCurrency(group.sellAmount)}
                          </p>
                        </div>
                      </div>

                      {group.profitTriggerPercent && (
                        <div className="flex items-center gap-2">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <Target className="h-4 w-4 text-blue-600" />
                          </div>
                          <div>
                            <p className="text-sm text-gray-600 dark:text-gray-300">Profit Target</p>
                            <p className="font-medium text-gray-900 dark:text-white">
                              {formatPercent(group.profitTriggerPercent)}
                            </p>
                            <p className="text-sm text-gray-600 dark:text-gray-300">
                              Amount: {formatCurrency(group.sellAmount)}
                            </p>
                          </div>
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex items-center gap-2 ml-4">
                {editingGroup === group.id ? (
                  <>
                    <button
                      onClick={handleSaveEdit}
                      className="p-2 bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400 rounded-lg hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors"
                      title="Save changes"
                    >
                      <Save className="h-4 w-4" />
                    </button>
                    <button
                      onClick={handleCancelEdit}
                      className="p-2 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                      title="Cancel editing"
                    >
                      <X className="h-4 w-4" />
                    </button>
                  </>
                ) : (
                  <>
                    <button
                      onClick={() => handleEditGroup(group)}
                      className="p-2 bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
                      title="Edit group constraints"
                    >
                      <Edit className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => handleDeleteGroup(group.id, group.name)}
                      className="p-2 bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400 rounded-lg hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors"
                      title="Delete constraint group"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </>
                )}
              </div>
            </div>

            {/* Expanded Stocks Section */}
            {expandedGroups.has(group.id) && (
              <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                  Stocks in this group {searchTerm && `(matching "${searchTerm}"):`}:
                </h4>

                {/* Individual Stocks */}
                {group.stocks.length > 0 && (
                  <div className="mb-4">
                    <h5 className="text-xs font-medium text-gray-600 dark:text-gray-400 mb-2 flex items-center gap-1">
                      <Tag className="h-3 w-3" />
                      Individual Stocks:
                    </h5>
                    <div className="space-y-3">
                      {getMatchingStocks(group).map((stock) => {
                        const stockInfo = getStockInfo(stock);
                        const override = group.stockOverrides?.[stock];
                        const buyTrigger = override?.buyTriggerPercent ?? group.buyTriggerPercent;
                        const sellTrigger = override?.sellTriggerPercent ?? group.sellTriggerPercent;
                        const profitTrigger = override?.profitTriggerPercent ?? group.profitTriggerPercent;
                        const buyAmount = override?.buyAmount ?? group.buyAmount;
                        const sellAmount = override?.sellAmount ?? group.sellAmount;
                        
                        return (
                          <div key={stock} className={`p-4 rounded-lg border ${searchTerm && stock.toLowerCase().includes(searchTerm.toLowerCase())
                            ? 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-300 dark:border-yellow-700'
                            : 'bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-600'
                            }`}>
                            <div className="flex items-start justify-between">
                              <div className="flex flex-col flex-1">
                                <div className="flex items-center gap-3 mb-2">
                                  <span className={`font-semibold ${searchTerm && stock.toLowerCase().includes(searchTerm.toLowerCase())
                                    ? 'text-yellow-900 dark:text-yellow-100'
                                    : 'text-gray-900 dark:text-white'
                                    }`}>
                                    {stock}
                                  </span>
                                  {group.stockOverrides?.[stock] ? (
                                    <span className="text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 px-2 py-1 rounded">
                                      Custom Constraints
                                    </span>
                                  ) : (
                                    <span className="text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 px-2 py-1 rounded">
                                      Group Constraints
                                    </span>
                                  )}
                                  {searchTerm && stock.toLowerCase().includes(searchTerm.toLowerCase()) && (
                                    <span className="text-xs bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300 px-2 py-1 rounded">
                                      Match
                                    </span>
                                  )}
                                </div>
                                
                                {stockInfo && (
                                  <span className="text-sm text-gray-500 dark:text-gray-400 mb-3">
                                    {stockInfo.name}
                                  </span>
                                )}

                                {/* Detailed Constraint Information */}
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                                  {/* Buy Trigger */}
                                  <div className="flex items-center gap-2">
                                    <div className="p-1.5 bg-red-100 dark:bg-red-900/30 rounded">
                                      <TrendingDown className="h-3 w-3 text-red-600 dark:text-red-400" />
                                    </div>
                                    <div>
                                      <p className="text-xs text-gray-600 dark:text-gray-400">Buy Trigger</p>
                                      <p className="font-medium text-red-600 dark:text-red-400 text-sm">
                                        {formatPercent(buyTrigger)}
                                      </p>
                                      <p className="text-xs text-gray-500 dark:text-gray-400">
                                        {formatCurrency(buyAmount)}
                                      </p>
                                    </div>
                                  </div>

                                  {/* Sell Trigger */}
                                  <div className="flex items-center gap-2">
                                    <div className="p-1.5 bg-green-100 dark:bg-green-900/30 rounded">
                                      <TrendingUp className="h-3 w-3 text-green-600 dark:text-green-400" />
                                    </div>
                                    <div>
                                      <p className="text-xs text-gray-600 dark:text-gray-400">Sell Trigger</p>
                                      <p className="font-medium text-green-600 dark:text-green-400 text-sm">
                                        {formatPercent(sellTrigger)}
                                      </p>
                                      <p className="text-xs text-gray-500 dark:text-gray-400">
                                        {formatCurrency(sellAmount)}
                                      </p>
                                    </div>
                                  </div>

                                  {/* Profit Target */}
                                  {profitTrigger && (
                                    <div className="flex items-center gap-2">
                                      <div className="p-1.5 bg-blue-100 dark:bg-blue-900/30 rounded">
                                        <Target className="h-3 w-3 text-blue-600 dark:text-blue-400" />
                                      </div>
                                      <div>
                                        <p className="text-xs text-gray-600 dark:text-gray-400">Profit Target</p>
                                        <p className="font-medium text-blue-600 dark:text-blue-400 text-sm">
                                          {formatPercent(profitTrigger)}
                                        </p>
                                        <p className="text-xs text-gray-500 dark:text-gray-400">
                                          {formatCurrency(sellAmount)}
                                        </p>
                                      </div>
                                    </div>
                                  )}
                                </div>
                              </div>
                              
                              <div className="flex items-center gap-1 ml-4">
                                <button
                                  onClick={() => handleEditStock(group.id, stock, group)}
                                  className="p-1.5 bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
                                  title="Edit individual constraints"
                                >
                                  <Edit className="h-4 w-4" />
                                </button>
                                {override && (
                                  <button
                                    onClick={() => handleResetStockConstraint(group.id, stock)}
                                    className="p-1.5 bg-orange-100 dark:bg-orange-900/30 text-orange-600 dark:text-orange-400 rounded hover:bg-orange-200 dark:hover:bg-orange-900/50 transition-colors"
                                    title="Reset to group defaults"
                                  >
                                    <AlertCircle className="h-4 w-4" />
                                  </button>
                                )}
                              </div>
                            </div>
                          </div>
                        );
                      })}

                            <div className="flex items-center gap-2">
                              {editingStock === `${group.id}-${stock}` ? (
                                <div className="w-full">
                                  {/* Info Banner */}
                                  <div className="mb-2 p-2 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded text-xs">
                                    <div className="flex items-center gap-1 text-blue-800 dark:text-blue-300">
                                      <Edit className="h-3 w-3" />
                                      <span className="font-medium">Editing Individual Stock Constraints</span>
                                    </div>
                                    <p className="text-blue-700 dark:text-blue-400 mt-1">
                                      {stock} will have custom constraints different from the group defaults.
                                    </p>
                                  </div>

                                  {/* Editing Controls */}
                                  <div className="flex items-center gap-2 flex-wrap">
                                    <div className="flex items-center gap-1">
                                      <TrendingDown className="h-3 w-3 text-red-600" />
                                      <input
                                        type="number"
                                        value={editValues.buyTriggerPercent}
                                        onChange={(e) => setEditValues(prev => ({ ...prev, buyTriggerPercent: parseFloat(e.target.value) }))}
                                        className="w-12 px-1 py-0.5 text-xs border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                                        step="0.1"
                                      />
                                      <span className="text-xs text-gray-900 dark:text-white">%</span>
                                    </div>
                                    <div className="flex items-center gap-1">
                                      <DollarSign className="h-3 w-3 text-red-600" />
                                      <input
                                        type="number"
                                        value={editValues.buyAmount}
                                        onChange={(e) => setEditValues(prev => ({ ...prev, buyAmount: parseFloat(e.target.value) }))}
                                        className="w-16 px-1 py-0.5 text-xs border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                                        step="100"
                                      />
                                    </div>
                                    <div className="flex items-center gap-1">
                                      <TrendingUp className="h-3 w-3 text-green-600" />
                                      <input
                                        type="number"
                                        value={editValues.sellTriggerPercent}
                                        onChange={(e) => setEditValues(prev => ({ ...prev, sellTriggerPercent: parseFloat(e.target.value) }))}
                                        className="w-12 px-1 py-0.5 text-xs border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                                        step="0.1"
                                      />
                                      <span className="text-xs text-gray-900 dark:text-white">%</span>
                                    </div>
                                    <div className="flex items-center gap-1">
                                      <DollarSign className="h-3 w-3 text-green-600" />
                                      <input
                                        type="number"
                                        value={editValues.sellAmount}
                                        onChange={(e) => setEditValues(prev => ({ ...prev, sellAmount: parseFloat(e.target.value) }))}
                                        className="w-16 px-1 py-0.5 text-xs border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                                        step="100"
                                      />
                                    </div>
                                    <div className="flex items-center gap-1">
                                      <Target className="h-3 w-3 text-blue-600" />
                                      <input
                                        type="number"
                                        value={editValues.profitTriggerPercent || ''}
                                        onChange={(e) => setEditValues(prev => ({ ...prev, profitTriggerPercent: e.target.value ? parseFloat(e.target.value) : undefined }))}
                                        className="w-12 px-1 py-0.5 text-xs border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded"
                                        step="0.1"
                                        placeholder="15"
                                      />
                                      <span className="text-xs text-gray-900 dark:text-white">%</span>
                                    </div>
                                    <button
                                      onClick={handleSaveEdit}
                                      className="p-1 bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400 rounded hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors"
                                      title="Create individual constraint"
                                    >
                                      <Save className="h-3 w-3" />
                                    </button>
                                    <button
                                      onClick={handleCancelEdit}
                                      className="p-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                                      title="Cancel editing"
                                    >
                                      <X className="h-3 w-3" />
                                    </button>
                                    {(() => {
                                      const [, stockSymbol] = editingStock.split('-');
                                      return group.stockOverrides?.[stockSymbol] && (
                                        <button
                                          onClick={() => handleResetStockConstraint(group.id, stockSymbol)}
                                          className="p-1 bg-orange-100 dark:bg-orange-900/30 text-orange-600 dark:text-orange-400 rounded hover:bg-orange-200 dark:hover:bg-orange-900/50 transition-colors"
                                          title="Reset to group defaults"
                                        >
                                          <AlertCircle className="h-3 w-3" />
                                        </button>
                                      );
                                    })()}
                                  </div>
                                </div>
                              ) : (
                                <div className="flex items-center gap-2">
                                  <div className="text-xs text-gray-600 dark:text-gray-300">
                                    {(() => {
                                      const override = group.stockOverrides?.[stock];
                                      const buyTrigger = override?.buyTriggerPercent ?? group.buyTriggerPercent;
                                      const sellTrigger = override?.sellTriggerPercent ?? group.sellTriggerPercent;
                                      return (
                                        <>
                                          <span className="text-red-600 dark:text-red-400">{formatPercent(buyTrigger)}</span>
                                          <span className="mx-1">|</span>
                                          <span className="text-green-600 dark:text-green-400">{formatPercent(sellTrigger)}</span>
                                          {override && <span className="ml-1 text-purple-600 dark:text-purple-400">*</span>}
                                        </>
                                      );
                                    })()}
                                  </div>
                                  <button
                                    onClick={() => handleEditStock(group.id, stock, group)}
                                    className="p-1 bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
                                    title="Edit individual constraints for this stock"
                                  >
                                    <Edit className="h-3 w-3" />
                                  </button>
                                </div>
                              )}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}

                {/* Stock Groups */}
                {group.stockGroups.length > 0 && (
                  <div className="mb-4">
                    <h5 className="text-xs font-medium text-gray-600 dark:text-gray-400 mb-2 flex items-center gap-1">
                      <Users className="h-3 w-3" />
                      Stock Groups:
                    </h5>
                    <div className="space-y-2">
                      {group.stockGroups.map((stockGroupId) => {
                        const stockGroup = stockGroups.find(sg => sg.id === stockGroupId);
                        if (!stockGroup) return null;

                        return (
                          <div key={stockGroupId} className="bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-3">
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center gap-2">
                                <div
                                  className="w-3 h-3 rounded-full"
                                  style={{ backgroundColor: stockGroup.color }}
                                />
                                <span className="font-medium text-purple-900 dark:text-purple-100">
                                  {stockGroup.name}
                                </span>
                                <span className="text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 px-2 py-1 rounded">
                                  {stockGroup.stocks.length} stocks
                                </span>
                              </div>
                              <button
                                onClick={() => handleRemoveStockFromGroup(stockGroupId, '')}
                                className="p-1 bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400 rounded hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors"
                                title="Remove group from constraint"
                              >
                                <Trash2 className="h-3 w-3" />
                              </button>
                            </div>

                            {/* Stocks in this group */}
                            <div className="space-y-2">
                              {stockGroup.stocks.map((stock) => {
                                const stockInfo = getStockInfo(stock);
                                const isMatch = searchTerm && stock.toLowerCase().includes(searchTerm.toLowerCase());
                                const override = group.stockOverrides?.[stock];
                                const buyTrigger = override?.buyTriggerPercent ?? group.buyTriggerPercent;
                                const sellTrigger = override?.sellTriggerPercent ?? group.sellTriggerPercent;
                                const buyAmount = override?.buyAmount ?? group.buyAmount;
                                const sellAmount = override?.sellAmount ?? group.sellAmount;

                                return (
                                  <div key={stock} className={`p-3 rounded-lg border ${isMatch
                                    ? 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-300 dark:border-yellow-700'
                                    : 'bg-white dark:bg-gray-700 border-gray-200 dark:border-gray-600'
                                    }`}>
                                    <div className="flex items-center justify-between">
                                      <div className="flex flex-col flex-1">
                                        <div className="flex items-center gap-2 mb-1">
                                          <span className={`font-medium ${isMatch
                                            ? 'text-yellow-900 dark:text-yellow-100'
                                            : 'text-gray-900 dark:text-white'
                                            }`}>
                                            {stock}
                                          </span>
                                          {override && (
                                            <span className="text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 px-1.5 py-0.5 rounded">
                                              Custom
                                            </span>
                                          )}
                                        </div>
                                        {stockInfo && (
                                          <span className="text-xs text-gray-500 dark:text-gray-400 mb-2">
                                            {stockInfo.name}
                                          </span>
                                        )}
                                        
                                        {/* Constraint Values */}
                                        <div className="flex items-center gap-4 text-xs">
                                          <div className="flex items-center gap-1">
                                            <TrendingDown className="h-3 w-3 text-red-600" />
                                            <span className="text-red-600 dark:text-red-400 font-medium">
                                              {formatPercent(buyTrigger)}
                                            </span>
                                            <span className="text-gray-500 dark:text-gray-400">
                                              ({formatCurrency(buyAmount)})
                                            </span>
                                          </div>
                                          <div className="flex items-center gap-1">
                                            <TrendingUp className="h-3 w-3 text-green-600" />
                                            <span className="text-green-600 dark:text-green-400 font-medium">
                                              {formatPercent(sellTrigger)}
                                            </span>
                                            <span className="text-gray-500 dark:text-gray-400">
                                              ({formatCurrency(sellAmount)})
                                            </span>
                                          </div>
                                        </div>
                                      </div>
                                      
                                      <div className="flex items-center gap-1 ml-2">
                                        <button
                                          onClick={() => handleEditStock(group.id, stock, group)}
                                          className="p-1 bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
                                          title="Edit individual constraints"
                                        >
                                          <Edit className="h-3 w-3" />
                                        </button>
                                        <button
                                          onClick={() => handleRemoveStockFromGroup(stockGroupId, stock)}
                                          className="p-1 bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400 rounded hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors"
                                          title="Remove stock from group"
                                        >
                                          <X className="h-3 w-3" />
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}

                {/* Add Stock to Group */}
                <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                  <h5 className="text-sm font-medium text-blue-900 dark:text-blue-300 mb-2">Add Stock to Group</h5>
                  <StockSearchInput
                    onStockSelect={(stock) => handleAddStockToGroup(group.id, stock)}
                    placeholder="Search by company name or symbol..."
                  />
                </div>
              </div>
            )}
          </div>
        ))}

        {/* Individual Constraints */}
        {individualConstraints.length > 0 && (
          <div className="mt-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
              <Tag className="h-5 w-5" />
              Individual Stock Constraints
            </h3>
            <div className="space-y-3">
              {individualConstraints
                .filter(constraint => !searchTerm || constraint.stockSymbol.toLowerCase().includes(searchTerm.toLowerCase()))
                .map((constraint) => {
                  const stockInfo = getStockInfo(constraint.stockSymbol);
                  return (
                    <div key={constraint.id} className="card border border-green-200 dark:border-green-800 p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex flex-col flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <span className="text-lg font-semibold text-gray-900 dark:text-white">
                              {constraint.stockSymbol}
                            </span>
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${constraint.isActive
                              ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300'
                              : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'
                              }`}>
                              {constraint.isActive ? 'Active' : 'Inactive'}
                            </span>
                            <span className="text-xs bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 px-2 py-1 rounded-full">
                              Individual
                            </span>
                          </div>
                          
                          {stockInfo && (
                            <span className="text-sm text-gray-500 dark:text-gray-400 mb-3">
                              {stockInfo.name}
                            </span>
                          )}

                          {/* Detailed Constraint Information */}
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            {/* Buy Trigger */}
                            <div className="flex items-center gap-2">
                              <div className="p-2 bg-red-100 dark:bg-red-900/30 rounded-lg">
                                <TrendingDown className="h-4 w-4 text-red-600 dark:text-red-400" />
                              </div>
                              <div>
                                <p className="text-xs text-gray-600 dark:text-gray-400">Buy Trigger</p>
                                <p className="font-medium text-red-600 dark:text-red-400">
                                  {formatPercent(constraint.buyTriggerPercent)}
                                </p>
                                <p className="text-xs text-gray-500 dark:text-gray-400">
                                  {formatCurrency(constraint.buyAmount)}
                                </p>
                              </div>
                            </div>

                            {/* Sell Trigger */}
                            <div className="flex items-center gap-2">
                              <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                                <TrendingUp className="h-4 w-4 text-green-600 dark:text-green-400" />
                              </div>
                              <div>
                                <p className="text-xs text-gray-600 dark:text-gray-400">Sell Trigger</p>
                                <p className="font-medium text-green-600 dark:text-green-400">
                                  {formatPercent(constraint.sellTriggerPercent)}
                                </p>
                                <p className="text-xs text-gray-500 dark:text-gray-400">
                                  {formatCurrency(constraint.sellAmount)}
                                </p>
                              </div>
                            </div>

                            {/* Profit Target */}
                            {constraint.profitTriggerPercent && (
                              <div className="flex items-center gap-2">
                                <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                                  <Target className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                                </div>
                                <div>
                                  <p className="text-xs text-gray-600 dark:text-gray-400">Profit Target</p>
                                  <p className="font-medium text-blue-600 dark:text-blue-400">
                                    {formatPercent(constraint.profitTriggerPercent)}
                                  </p>
                                  <p className="text-xs text-gray-500 dark:text-gray-400">
                                    {formatCurrency(constraint.sellAmount)}
                                  </p>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Action Buttons */}
                        <div className="flex items-center gap-2 ml-4">
                          <button
                            onClick={() => {/* Add edit functionality for individual constraints */}}
                            className="p-2 bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
                            title="Edit constraint"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  );
                })}
            </div>
          </div>
        )}

        {filteredConstraintGroups.length === 0 && individualConstraints.length === 0 && (
          <div className="text-center py-8">
            <p className="text-gray-600 dark:text-gray-300">
              {searchTerm ? `No constraints found matching "${searchTerm}"` : 'No constraints found'}
            </p>
            {searchTerm && (
              <button
                onClick={() => setSearchTerm('')}
                className="mt-2 text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 text-sm"
              >
                Clear search
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ConstraintPositionList;