version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: trading_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading_network_prod
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: trading_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - trading_network_prod
    restart: unless-stopped
    command: redis-server --appendonly yes

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: trading_backend_prod
    environment:
      - NODE_ENV=production
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - trading_network_prod
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: trading_frontend_prod
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - trading_network_prod
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: trading_nginx_prod
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - trading_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  trading_network_prod:
    driver: bridge